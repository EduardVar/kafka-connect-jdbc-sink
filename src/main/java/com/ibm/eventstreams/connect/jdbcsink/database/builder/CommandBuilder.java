package com.ibm.eventstreams.connect.jdbcsink.database.builder;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import org.apache.kafka.connect.data.Schema;

import com.ibm.eventstreams.connect.jdbcsink.database.datasource.IDataSource;
import com.ibm.eventstreams.connect.jdbcsink.database.writer.JDBCWriter;

public class CommandBuilder {

    public IDataSource dataSource = null;

    public CommandBuilder(IDataSource connection) {
        this.dataSource = connection;
    }

    public boolean doesTableExist(Connection connection, String tableName) throws SQLException {
        String[] tableParts = tableName.split("\\.");
        DatabaseMetaData dbm = connection.getMetaData();
        ResultSet table = dbm.getTables(null, tableParts[0], tableParts[1], null);
        return table.next();
    }

    public boolean isPostgreSQL() throws SQLException {
        return dataSource.getConnection().getMetaData().getDatabaseProductName().toLowerCase().contains("postgresql");
    }

    public boolean isDB2() throws SQLException {
        return dataSource.getConnection().getMetaData().getDatabaseProductName().toLowerCase().contains("db2");
    }

    public boolean isMySQL() throws SQLException {
        return dataSource.getConnection().getMetaData().getDatabaseProductName().toLowerCase().contains("mysql");
    }

    public String getPostgreSQLFieldType(Schema.Type fieldType) {
        switch (fieldType) {
            case INT8:
            case INT16:
            case INT32:
                return "INTEGER";
            case INT64:
                return "BIGINT";
            case FLOAT32:
                return "REAL";
            case FLOAT64:
                return "DOUBLE PRECISION";
            case BOOLEAN:
                return "BOOLEAN";
            case STRING:
                return "VARCHAR(255)";
            default:
                return "VARCHAR(255)";
        }
    }

    public String getDB2FieldType(Schema.Type fieldType) {
        switch (fieldType) {
            case INT8:
            case INT16:
            case INT32:
                return "INTEGER";
            case INT64:
                return "BIGINT";
            case FLOAT32:
                return "REAL";
            case FLOAT64:
                return "DOUBLE";
            case BOOLEAN:
                return "BOOLEAN";
            case STRING:
                return "VARCHAR(255)";
            default:
                return "VARCHAR(255)";
        }
    }

    public String getMySQLFieldType(Schema.Type fieldType) {
        switch (fieldType) {
            case INT8:
            case INT16:
            case INT32:
                return "INT";
            case INT64:
                return "BIGINT";
            case FLOAT32:
                return "FLOAT";
            case FLOAT64:
                return "DOUBLE";
            case BOOLEAN:
                return "BOOLEAN";
            case STRING:
                return "VARCHAR(255)";
            default:
                return "VARCHAR(255)";
        }
    }

    public String getIdColumnDefinition() {
        try {
            if (isPostgreSQL()) {
                if (getPostgresMajorVersion() <= 9) {
                    return "id SERIAL PRIMARY KEY";
                } else {
                    return "id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY";
                }
            } else if (isDB2()) {
                return "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY";
            } else if (isMySQL()) {
                return "id INTEGER PRIMARY KEY AUTO_INCREMENT";
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY";
    }

    public int getPostgresMajorVersion() {
        Connection connection;
        try {
            connection = dataSource.getConnection();
            DatabaseMetaData metaData = connection.getMetaData();
            String databaseProductName = metaData.getDatabaseProductName();
            if ("PostgreSQL".equals(databaseProductName)) {
                int majorVersion = metaData.getDatabaseMajorVersion();
                return majorVersion;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    /**
     * Get ID column definition
     *
     * @param jdbcWriter
     */
    public String getIdColumnDefinition(JDBCWriter jdbcWriter) {
        try {
            if (isPostgreSQL()) {
                if (getPostgresMajorVersion() <= 9) {
                    return "id SERIAL PRIMARY KEY";
                } else {
                    return "id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY";
                }
            } else if (isDB2()) {
                return "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY";
            } else if (isMySQL()) {
                return "id INTEGER PRIMARY KEY AUTO_INCREMENT";
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY";
    }

    public String buildInsertStatement(String tableName, List<String> fieldNames) {
        StringBuilder sb = new StringBuilder();
        sb.append("INSERT INTO ").append(tableName);
        sb.append("(").append(String.join(", ", fieldNames)).append(")");
        sb.append(" VALUES ");
        sb.append("(").append(String.join(", ", Collections.nCopies(fieldNames.size(), "?"))).append(")");
        return sb.toString();
    }
}
